#!/bin/bash

# Block Default Allow HTTP WAF Example Test Validation Script
echo "=== Block Default Allow HTTP WAF Example Validation Test ==="
echo ""

# Test 1: Terraform Init
echo "1. Testing Terraform Init..."
if terraform init > /dev/null 2>&1; then
    echo "‚úÖ Terraform init successful"
else
    echo "‚ùå Terraform init failed"
    exit 1
fi

# Test 2: Terraform Validate
echo "2. Testing Terraform Validate..."
if terraform validate > /dev/null 2>&1; then
    echo "‚úÖ Terraform validate successful"
else
    echo "‚ùå Terraform validate failed"
    terraform validate
    exit 1
fi

# Test 3: Terraform Format Check
echo "3. Testing Terraform Format..."
if terraform fmt -check > /dev/null 2>&1; then
    echo "‚úÖ Terraform format check successful"
else
    echo "‚ö†Ô∏è  Terraform format check failed - running terraform fmt"
    terraform fmt
    echo "‚úÖ Terraform format applied"
fi

# Test 4: Terraform Plan (dry run without AWS credentials)
echo "4. Testing Terraform Plan (dry run)..."
terraform plan > /dev/null 2>&1
plan_exit_code=$?

if [ $plan_exit_code -eq 0 ]; then
    echo "‚úÖ Terraform plan successful (with AWS credentials)"
elif [ $plan_exit_code -eq 1 ] && terraform plan 2>&1 | grep -q "credential"; then
    echo "‚úÖ Terraform plan shows valid configuration (AWS credentials needed for actual deployment)"
else
    echo "‚ùå Terraform plan failed with configuration errors"
    terraform plan
    exit 1
fi

# Test 5: Configuration Validation
echo "5. Testing Configuration..."

# Check for default_action = "block"
echo "   Checking default action..."
if grep -q 'default_action = "block"' main.tf; then
    echo "‚úÖ Default action correctly set to 'block'"
else
    echo "‚ùå Default action not set to 'block'"
    exit 1
fi

# Check for allow rules
echo "   Checking allow rules..."
allow_rule_count=$(grep -c '"allow"' main.tf)
if [ $allow_rule_count -ge 7 ]; then
    echo "‚úÖ Expected number of allow rules found ($allow_rule_count rules)"
else
    echo "‚ùå Insufficient allow rules found: $allow_rule_count (expected at least 7)"
    exit 1
fi

# Check for block rules
echo "   Checking block rules..."
block_rule_count=$(grep -c '"block"' main.tf)
if [ $block_rule_count -ge 3 ]; then
    echo "‚úÖ Expected number of block rules found ($block_rule_count rules)"
else
    echo "‚ùå Insufficient block rules found: $block_rule_count (expected at least 3)"
    exit 1
fi

# Check for AWS managed rules with count mode
echo "   Checking AWS managed rules..."
if grep -q 'override_action = "count"' main.tf; then
    echo "‚úÖ AWS managed rules configured in count mode for monitoring"
else
    echo "‚ùå AWS managed rules not configured properly"
    exit 1
fi

# Check for geographic filtering
echo "   Checking geographic filtering..."
if grep -q "geo_match_statement" main.tf; then
    echo "‚úÖ Geographic filtering configured"
else
    echo "‚ùå Geographic filtering not found"
    exit 1
fi

# Check for rate limiting
echo "   Checking rate limiting..."
if grep -q "rate_based_statement" main.tf; then
    echo "‚úÖ Rate limiting configured"
else
    echo "‚ùå Rate limiting not found"
    exit 1
fi

# Check for CloudWatch logging configuration
echo "   Checking CloudWatch logging..."
if grep -q "create_log_group" main.tf && grep -q "existing_log_group_arn" main.tf; then
    echo "‚úÖ CloudWatch logging configuration found"
else
    echo "‚ùå CloudWatch logging configuration missing"
    exit 1
fi

# Check for logging variables
echo "   Checking logging variables..."
logging_var_count=$(grep -c "variable.*log" main.tf)
if [ $logging_var_count -ge 5 ]; then
    echo "‚úÖ CloudWatch logging variables configured ($logging_var_count variables)"
else
    echo "‚ö†Ô∏è  Insufficient logging variables: $logging_var_count (expected at least 5)"
fi

# Check for outputs
echo "   Checking outputs..."
output_count=$(grep -c "output \"" main.tf)
if [ $output_count -ge 6 ]; then
    echo "‚úÖ Expected number of outputs found ($output_count outputs)"
else
    echo "‚ö†Ô∏è  Unexpected output count: $output_count (expected at least 6)"
fi

# Test 6: Security Model Validation
echo "6. Testing Security Model..."

# Check for explicit allow patterns
echo "   Checking explicit allow patterns..."
if grep -q "AllowSpecificCountries" main.tf && \
   grep -q "AllowLegitimateUserAgents" main.tf && \
   grep -q "AllowStandardHTTPMethods" main.tf; then
    echo "‚úÖ Explicit allow patterns configured correctly"
else
    echo "‚ùå Missing explicit allow patterns"
    exit 1
fi

# Check for security blocking patterns
echo "   Checking security blocking patterns..."
if grep -q "BlockExcessiveRequests" main.tf && \
   grep -q "BlockSuspiciousPatterns" main.tf && \
   grep -q "BlockLargePayloads" main.tf; then
    echo "‚úÖ Security blocking patterns configured correctly"
else
    echo "‚ùå Missing security blocking patterns"
    exit 1
fi

echo ""
echo "=== Validation Summary ==="
echo "‚úÖ All validation tests passed!"
echo "‚úÖ Block Default Allow HTTP WAF example is ready for deployment"
echo ""
echo "üîí Security Model Validated: DEFAULT DENY - EXPLICIT ALLOW"
echo ""
echo "üìã Configuration Summary:"
echo ""
echo "üõ°Ô∏è  Default Action: BLOCK (High Security Mode)"
echo "   ‚Ä¢ All traffic blocked by default"
echo "   ‚Ä¢ Only explicitly allowed patterns pass through"
echo "   ‚Ä¢ Zero-trust security model"
echo ""
echo "‚úÖ Allow Rules (Priorities 200-206):"
echo "   ‚Ä¢ Geographic Allow List: 7 countries (US, CA, GB, DE, FR, AU, JP)"
echo "   ‚Ä¢ User-Agent Validation: Must contain 'Mozilla'"
echo "   ‚Ä¢ HTTP Method Control: GET, POST, PUT only"
echo "   ‚Ä¢ Content-Type Validation: HTML and JSON"
echo ""
echo "üö´ Block Rules (Priorities 300-302):"
echo "   ‚Ä¢ Rate Limiting: 2000 requests/5min per IP"
echo "   ‚Ä¢ Suspicious Patterns: Path traversal (../)"
echo "   ‚Ä¢ Large Payloads: >1MB request bodies"
echo ""
echo "üìä Monitoring Rules (Priorities 100-101):"
echo "   ‚Ä¢ AWS Common Rule Set: COUNT mode (monitoring)"
echo "   ‚Ä¢ AWS SQLi Rule Set: COUNT mode (monitoring)"
echo ""
echo "üìà Resource Summary:"
echo "   ‚Ä¢ WAF ACL: 1 (with default_action = block)"
echo "   ‚Ä¢ Allow Rules: 7 (explicit allow patterns)"
echo "   ‚Ä¢ Block Rules: 3 (security enforcement)"
echo "   ‚Ä¢ AWS Managed Rules: 2 (monitoring mode)"
echo "   ‚Ä¢ Estimated WCUs: ~100"
echo "   ‚Ä¢ Monthly Cost: ~$3.06"
echo ""
echo "üéØ Use Cases:"
echo "   ‚Ä¢ High-security applications"
echo "   ‚Ä¢ Zero-trust architecture"
echo "   ‚Ä¢ Compliance requirements (PCI DSS, SOX, HIPAA)"
echo "   ‚Ä¢ API security with strict access control"
echo "   ‚Ä¢ Applications handling sensitive data"
echo ""
echo "‚ö†Ô∏è  CRITICAL WARNINGS:"
echo "   ‚Ä¢ DEFAULT ACTION IS BLOCK - Test thoroughly before production!"
echo "   ‚Ä¢ Ensure allow rules cover ALL legitimate traffic patterns"
echo "   ‚Ä¢ Monitor CloudWatch metrics closely after deployment"
echo "   ‚Ä¢ Have rollback plan ready (disable WAF if needed)"
echo "   ‚Ä¢ Test from different geographic locations and browsers"
echo ""
echo "üß™ Testing Commands (after deployment):"
echo ""
echo "Legitimate Traffic (should be ALLOWED):"
echo "curl -H 'User-Agent: Mozilla/5.0' https://your-app.com/"
echo "curl -H 'Content-Type: application/json' -H 'User-Agent: Mozilla/5.0' -X POST https://your-app.com/api"
echo ""
echo "Blocked Traffic (should be BLOCKED - 403 Forbidden):"
echo "curl https://your-app.com/  # No User-Agent"
echo "curl -H 'User-Agent: Mozilla/5.0' https://your-app.com/../etc/passwd  # Path traversal"
echo ""
echo "üöÄ Deployment Steps:"
echo "1. Copy terraform.tfvars.example to terraform.tfvars"
echo "2. Customize variables for your environment"
echo "3. Deploy to STAGING first: terraform apply"
echo "4. Test thoroughly with all user workflows"
echo "5. Monitor CloudWatch metrics"
echo "6. Deploy to production only after successful staging tests"
echo ""
echo "üìä CloudWatch Logging & Monitoring:"
echo ""
echo "‚úÖ CloudWatch Logging Features:"
echo "   ‚Ä¢ Automatic log group creation (or use existing)"
echo "   ‚Ä¢ Configurable retention (1 day to 10 years)"
echo "   ‚Ä¢ Optional KMS encryption for sensitive environments"
echo "   ‚Ä¢ Detailed request/response logging with rule decisions"
echo "   ‚Ä¢ Support for CloudWatch Insights queries"
echo ""
echo "üìà Monitoring Commands:"
echo ""
echo "# View live WAF logs:"
echo "aws logs tail /aws/wafv2/block-default-allow-http-waf --follow"
echo ""
echo "# Filter blocked requests:"
echo "aws logs filter-log-events --log-group-name /aws/wafv2/block-default-allow-http-waf --filter-pattern '{ \$.action = \"BLOCK\" }'"
echo ""
echo "# Filter allowed requests:"
echo "aws logs filter-log-events --log-group-name /aws/wafv2/block-default-allow-http-waf --filter-pattern '{ \$.action = \"ALLOW\" }'"
echo ""
echo "# CloudWatch metrics:"
echo "aws cloudwatch get-metric-statistics --namespace AWS/WAFV2 --metric-name BlockedRequests --dimensions Name=WebACL,Value=block-default-allow-http-waf"
echo "aws cloudwatch get-metric-statistics --namespace AWS/WAFV2 --metric-name AllowedRequests --dimensions Name=WebACL,Value=block-default-allow-http-waf"
echo ""
echo "üí° CloudWatch Insights Queries (after deployment):"
echo "   ‚Ä¢ Top blocked countries by traffic volume"
echo "   ‚Ä¢ Most common User-Agent patterns in blocked requests"
echo "   ‚Ä¢ Hourly traffic patterns (allowed vs blocked)"
echo "   ‚Ä¢ Rule effectiveness analysis"
echo ""
echo "üìã Logging Configuration Options:"
echo "   ‚Ä¢ enable_logging = true/false"
echo "   ‚Ä¢ create_log_group = true (new) / false (existing)"
echo "   ‚Ä¢ log_group_retention_days = 30 (configurable)"
echo "   ‚Ä¢ kms_key_id = null (optional encryption)"